{"version":3,"sources":["plugins/firebase.js","services/AppService.js","App.js","serviceWorker.js","index.js"],"names":["Firebase","firebase","AppService","fb","createUser","user","auth","createUserWithEmailAndPassword","username","password","then","resp","console","log","App","state","service","register","event","preventDefault","onChangeInput","prop","target","name","value","setState","className","onSubmit","this","type","placeholder","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wSAWeA,G,YAFEC,gBALI,KCONC,E,iDATXC,GAAKH,E,KAELI,WAAa,SAACC,GACV,EAAKF,GAAGG,OAAOC,+BAA+BF,EAAKG,SAAUH,EAAKI,UAAUC,MAAK,SAACC,GAC9EC,QAAQC,IAAIF,QCqCTG,E,4MAtCbC,MAAQ,CACNP,SAAW,GACXC,SAAW,I,EAGbO,QAAU,IAAId,E,EAEde,SAAW,SAACC,GACVA,EAAMC,iBACN,EAAKH,QAAQZ,WAAW,EAAKW,Q,EAG/BK,cAAgB,SAACF,GACf,IAAIG,EAAOH,EAAMI,OAAOC,KACpBC,EAAQN,EAAMI,OAAOE,MACrBnB,EAAO,EAAKU,MAChBV,EAAKgB,GAAQG,EACb,EAAKC,SAASpB,I,uDAId,OACE,yBAAKqB,UAAU,OACb,0CACA,oCACA,0BAAMC,SAAUC,KAAKX,UACnB,2BAAOM,KAAK,WAAWM,KAAK,OAAOC,YAAY,WAAWC,SAAUH,KAAKR,gBACzE,6BACA,2BAAOG,KAAK,WAAWM,KAAK,WAAWC,YAAY,WAAWC,SAAUH,KAAKR,gBAC7E,6BACA,4BAAQS,KAAK,UAAb,mB,GA/BQG,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.6b8b2a3c.chunk.js","sourcesContent":["import * as firebase from 'firebase';\r\nimport \"firebase/auth\";\r\nimport \"firebase/database\";\r\n\r\nvar firebaseConfig = {\r\n    \r\n  };\r\n\r\n  // Initialize Firebase \r\nconst Firebase = firebase.initializeApp(firebaseConfig);\r\n\r\nexport default Firebase;","import Firebase from '../plugins/firebase'\r\nclass AppService {\r\n    fb = Firebase;\r\n\r\n    createUser = (user) => {\r\n        this.fb.auth().createUserWithEmailAndPassword(user.username, user.password).then((resp)=> {\r\n            console.log(resp);\r\n        });\r\n    }    \r\n}\r\n\r\nexport default AppService;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport AppService from './services/AppService';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    username : \"\",\r\n    password : \"\"\r\n  };\r\n\r\n  service = new AppService();\r\n\r\n  register = (event) => {\r\n    event.preventDefault();\r\n    this.service.createUser(this.state);\r\n  }\r\n\r\n  onChangeInput = (event) => {\r\n    let prop = event.target.name;\r\n    let value = event.target.value;\r\n    let user = this.state;\r\n    user[prop] = value;\r\n    this.setState(user);   \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 >E-Commerce</h1>\r\n        <h1 >beta</h1>\r\n        <form onSubmit={this.register} >\r\n          <input name=\"username\" type=\"text\" placeholder=\"Username\" onChange={this.onChangeInput} />\r\n          <br/>\r\n          <input name=\"password\" type=\"password\" placeholder=\"Password\" onChange={this.onChangeInput}/> \r\n          <br/>\r\n          <button type=\"submit\">Registrar</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}